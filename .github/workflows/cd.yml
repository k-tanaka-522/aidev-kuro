name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    if: false  # Temporarily disabled until AWS credentials are configured
    
    outputs:
      backend-image: ${{ steps.build-backend.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.ECR_REGISTRY }}/agentdev-backend
          ${{ env.ECR_REGISTRY }}/agentdev-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push backend image
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.ECR_REGISTRY }}/agentdev-backend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
        
    - name: Build and push frontend image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.ECR_REGISTRY }}/agentdev-frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: false  # Temporarily disabled until AWS credentials are configured
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy CloudFormation stack
      run: |
        aws cloudformation deploy \
          --template-file cloudformation/main.yaml \
          --stack-name agentdev-staging \
          --parameter-overrides \
            Environment=staging \
            ProjectName=agentdev \
            BedrockRegion=${{ env.AWS_REGION }} \
          --capabilities CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset
          
    - name: Update ECS service
      run: |
        # Get cluster and service names
        CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[?contains(@, `agentdev-staging`)]' --output text | cut -d'/' -f2)
        SERVICE_NAME=$(aws ecs list-services --cluster $CLUSTER_NAME --query 'serviceArns[0]' --output text | cut -d'/' -f3)
        
        # Update service with new image
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $SERVICE_NAME \
          --force-new-deployment
          
        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME
          
    - name: Run smoke tests
      run: |
        # Wait for ALB to be ready
        sleep 60
        
        # Get ALB endpoint
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names agentdev-staging-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
          
        # Health check
        curl -f https://$ALB_DNS/health || exit 1
        
        # API check
        curl -f https://$ALB_DNS/api/v1/projects/ \
          -H "Authorization: Bearer ${{ secrets.STAGING_API_TOKEN }}" || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: false  # Temporarily disabled until AWS credentials are configured
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create deployment
      id: deployment
      uses: actions/github-script@v6
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Production deployment',
            auto_merge: false
          });
          return deployment.data.id;
          
    - name: Deploy CloudFormation stack
      run: |
        aws cloudformation deploy \
          --template-file cloudformation/main.yaml \
          --stack-name agentdev-production \
          --parameter-overrides \
            Environment=production \
            ProjectName=agentdev \
            BedrockRegion=${{ env.AWS_REGION }} \
          --capabilities CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset
          
    - name: Blue-Green deployment
      run: |
        # Create new task definition with new image
        FAMILY="agentdev-production-backend"
        NEW_IMAGE="${{ env.ECR_REGISTRY }}/agentdev-backend:${{ github.sha }}"
        
        # Get current task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition \
          --task-definition $FAMILY \
          --query 'taskDefinition' \
          --output json)
          
        # Update image in task definition
        NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | \
          jq --arg IMAGE "$NEW_IMAGE" \
          '.containerDefinitions[0].image = $IMAGE | 
           del(.taskDefinitionArn) | 
           del(.revision) | 
           del(.status) | 
           del(.requiresCompatibility) | 
           del(.placementConstraints) | 
           del(.compatibilities) | 
           del(.registeredAt) | 
           del(.registeredBy)')
           
        # Register new task definition
        NEW_REVISION=$(echo $NEW_TASK_DEFINITION | \
          aws ecs register-task-definition \
          --cli-input-json file:///dev/stdin \
          --query 'taskDefinition.revision' \
          --output text)
          
        # Update service
        CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[?contains(@, `agentdev-production`)]' --output text | cut -d'/' -f2)
        SERVICE_NAME=$(aws ecs list-services --cluster $CLUSTER_NAME --query 'serviceArns[0]' --output text | cut -d'/' -f3)
        
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $SERVICE_NAME \
          --task-definition $FAMILY:$NEW_REVISION
          
        # Wait for deployment
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME
          
    - name: Production smoke tests
      run: |
        # Get ALB endpoint
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names agentdev-production-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
          
        # Health check
        curl -f https://$ALB_DNS/health || exit 1
        
        # API check
        curl -f https://$ALB_DNS/api/v1/projects/ \
          -H "Authorization: Bearer ${{ secrets.PRODUCTION_API_TOKEN }}" || exit 1
          
    - name: Update deployment status
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: '${{ job.status }}',
            environment: 'production',
            description: 'Production deployment ${{ job.status }}'
          });

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Cleanup old ECR images
      run: |
        # Keep only the latest 10 images for each repository
        for repo in agentdev-backend agentdev-frontend; do
          aws ecr describe-images \
            --repository-name $repo \
            --query 'sort_by(imageDetails,&imagePushedAt)[:-10].[imageDigest]' \
            --output text | \
          while read digest; do
            if [ ! -z "$digest" ]; then
              aws ecr batch-delete-image \
                --repository-name $repo \
                --image-ids imageDigest=$digest
            fi
          done
        done